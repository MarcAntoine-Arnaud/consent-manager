{
  "stats": {
    "suites": 17,
    "tests": 43,
    "passes": 43,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-27T16:51:19.407Z",
    "end": "2024-06-27T16:51:24.452Z",
    "duration": 5045,
    "testsRegistered": 43,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1029,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connect(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connection.db.dropDatabase();",
          "err": {},
          "uuid": "f0a40d41-6707-4cb5-a8e0-3c030f9d9b13",
          "parentUUID": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 62,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "serverInstance = (0, server_1.startServer)(9091);",
          "err": {},
          "uuid": "c850a341-ec96-4093-b130-e38900a16779",
          "parentUUID": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"before all\" hook in \"{root}\"",
          "fullTitle": "\"before all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 572,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "serverInstance = (0, server_1.startServer)(9092);\n//create new participant\nconst participantData = testAccount_1.testParticipant3;\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants`)\n    .send(participantData);\n//login the participant\nconst authResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testParticipant3.clientID,\n    clientSecret: testAccount_1.testParticipant3.clientSecret,\n});\nparticipantJWT = `Bearer ${authResponse.body.jwt}`;",
          "err": {},
          "uuid": "3df73936-834c-4c04-aac1-91210362111b",
          "parentUUID": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
          "isHook": true,
          "skipped": false
        }
      ],
      "afterHooks": [
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 20,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "console.log(process.env.MONGO_URI_TEST);\nawait mongoose_1.default.connection.close();",
          "err": {},
          "uuid": "e3636e6c-51b1-4200-bdd9-196133530d22",
          "parentUUID": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "serverInstance.server.close();",
          "err": {},
          "uuid": "2ad18bbd-6f71-469e-8f76-6de2653a764a",
          "parentUUID": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
          "isHook": true,
          "skipped": false
        },
        {
          "title": "\"after all\" hook in \"{root}\"",
          "fullTitle": "\"after all\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 1,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "serverInstance.server.close();",
          "err": {},
          "uuid": "4a237ecc-9f74-4a16-bf41-edd3995f8549",
          "parentUUID": "4517352a-ee26-4e9f-b05e-979f8b9b1209",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
          "title": "Consent Routes Tests",
          "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\consents.spec.ts",
          "file": "\\src\\tests\\consents.spec.ts",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Consent Routes Tests\"",
              "fullTitle": "Consent Routes Tests \"before all\" hook in \"Consent Routes Tests\"",
              "timedOut": false,
              "duration": 900,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "nock_1.default.cleanAll();\nserverInstance = (0, server_1.startServer)(9090);\n// Create Provider\nconst providerData = testAccount_1.testProvider1;\nconst providerResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(providerData);\nproviderId = providerResponse.body._id;\nselfDesc_providerId = providerData.selfDescriptionURL;\n// Login provider\nconst providerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testProvider1.clientID,\n    clientSecret: testAccount_1.testProvider1.clientSecret,\n});\nproviderJWT = `Bearer ${providerAuthResponse.body.jwt}`;\nproviderBase64 = Buffer.from(providerData.selfDescriptionURL).toString(\"base64\");\n// Create Consumer\nconst consumerData = testAccount_1.testConsumer1;\nconst consumerResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(consumerData);\nconsumerId = consumerResponse.body._id;\nselfDesc_consumerId = consumerData.selfDescriptionURL;\n// Login consumer\nconst consumerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testConsumer1.clientID,\n    clientSecret: testAccount_1.testConsumer1.clientSecret,\n});\nconsumerJWT = `Bearer ${consumerAuthResponse.body.jwt}`;\nconsumerBase64 = Buffer.from(consumerData.selfDescriptionURL).toString(\"base64\");\n// Create User\nconst userData = testAccount_1.testUser1;\nconst userResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/signup`)\n    .send(userData);\nuserId = userResponse.body.user._id;\n// Login user\nconst userAuthresponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: testAccount_1.testUser1.email,\n    password: testAccount_1.testUser1.password,\n});\nuserJwt = `Bearer ${userAuthresponse.body.accessToken}`;\n// Create UserIdentifier Provider\nconst providerUserIdentifierResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    email: testAccount_1.testUser1.email,\n    identifier: \"providerUserIdentifier1\",\n});\nproviderUserIdentifier = providerUserIdentifierResponse.body._id;\n// Create UserIdentifier Consumer\nconst consumerUserIdentifierResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", consumerJWT)\n    .send({\n    email: testAccount_1.testUser1.email,\n    identifier: \"consumerUserIdentifier1\",\n});\nconsumerUserIdentifier = consumerUserIdentifierResponse.body._id;",
              "err": {},
              "uuid": "34b5c132-c20a-42b5-93ef-ef43a6ce220e",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Consent Routes Tests\"",
              "fullTitle": "Consent Routes Tests \"after all\" hook in \"Consent Routes Tests\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "serverInstance.server.close();",
              "err": {},
              "uuid": "06d651ec-e1c9-4b29-9a43-f1296a189985",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should get available exchanges",
              "fullTitle": "Consent Routes Tests should get available exchanges",
              "timedOut": false,
              "duration": 144,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/as?as=provider`)\n    .set(\"Authorization\", providerJWT);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"participant\");\n(0, chai_1.expect)(response.body).to.have.property(\"exchanges\");\n(0, chai_1.expect)(response.body.participant).to.have.property(\"selfDescription\");\n(0, chai_1.expect)(response.body.participant).to.have.property(\"base64SelfDescription\");",
              "err": {},
              "uuid": "c5afd746-d0ea-470d-aff1-9269686917aa",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get the privacy notices",
              "fullTitle": "Consent Routes Tests should get the privacy notices",
              "timedOut": false,
              "duration": 233,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${userId}/${providerBase64}/${consumerBase64}`)\n    .set(\"x-user-key\", providerUserIdentifier);\nprivacyNoticeId = response.body[0]?._id;\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n(0, chai_1.expect)(response.body[0]).to.have.property(\"_id\");\n(0, chai_1.expect)(response.body[0]).to.have.property(\"dataProvider\", \"https://api.test.com/v1/catalog/participants/656dfb3e282d47cfa6b66b2b\");\n(0, chai_1.expect)(response.body[0]).to.have.property(\"contract\", \"http://localhost:8888/contracts/65e5d715c99e484e4685a964\");",
              "err": {},
              "uuid": "9a8c76ce-311c-410d-8f0c-2e913b11962d",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get a privacy notice by id",
              "fullTitle": "Consent Routes Tests should get a privacy notice by id",
              "timedOut": false,
              "duration": 149,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${privacyNoticeId}`)\n    .set(\"x-user-key\", providerUserIdentifier);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n(0, chai_1.expect)(response.body).to.have.property(\"_id\").and.to.equal(privacyNoticeId);\n(0, chai_1.expect)(response.body).to.have.property(\"contract\");\n(0, chai_1.expect)(response.body.dataProvider._id).to.equal(testAccount_1.testProvider1.identifier);",
              "err": {},
              "uuid": "355479d0-fa86-4b03-a9e6-c923b6589b30",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should give consent",
              "fullTitle": "Consent Routes Tests should give consent",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .send({\n    privacyNoticeId: privacyNoticeId,\n});\nconsentId = response.body._id;\n(0, chai_1.expect)(response.status).to.be.equal(201);\n// expect(response.body.user).to.equal(userId);\n(0, chai_1.expect)(response.body.providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consented).to.equal(true);\n(0, chai_1.expect)(response.body.dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.privacyNotice).to.equal(privacyNoticeId);\n(0, chai_1.expect)(response.body.status).to.equal(\"granted\");",
              "err": {},
              "uuid": "fea64e87-77fa-4a3c-94f1-a82258aa0f6c",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should triggerDataExchange",
              "fullTitle": "Consent Routes Tests should triggerDataExchange",
              "timedOut": false,
              "duration": 88,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/data-exchange`)\n    .set(\"x-user-key\", providerUserIdentifier);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"successfully sent consent to the provider's consent export endpoint to trigger the data exchange\");",
              "err": {},
              "uuid": "1b498542-c518-41c0-b1fe-09eb1525e58a",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserAvailableExchanges",
              "fullTitle": "Consent Routes Tests getUserAvailableExchanges",
              "timedOut": false,
              "duration": 78,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/exchanges/user`)\n    .set(\"Authorization\", userJwt)\n    .query({ participantId: providerId })\n    .expect(200);\ncontractbase64 = response.body.exchanges[0].base64Contract;\n(0, chai_1.expect)(response.body.participant.selfDescription).to.equal(selfDesc_providerId);\n(0, chai_1.expect)(response.body.exchanges).to.not.be.empty;\n(0, chai_1.expect)(response.body.exchanges[0].participantSelfDescription).to.equal(selfDesc_consumerId);",
              "err": {},
              "uuid": "cc631a6a-3d07-450c-aff4-130822d959a3",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserPrivacyNoticesByContract",
              "fullTitle": "Consent Routes Tests getUserPrivacyNoticesByContract",
              "timedOut": false,
              "duration": 60,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/${providerUserIdentifier}/${providerBase64}/${consumerBase64}/${contractbase64}`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\nconsole.log(\"contractrbase64:\", contractbase64);\n(0, chai_1.expect)(response.body[0].dataProvider).to.equal(selfDesc_providerId);\n(0, chai_1.expect)(response.body[0].recipients).to.deep.include(selfDesc_consumerId);",
              "err": {},
              "uuid": "92508627-2b1e-4ffe-bde0-bf18f388282c",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "getUserPrivacyNoticeById",
              "fullTitle": "Consent Routes Tests getUserPrivacyNoticeById",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/privacy-notices/${privacyNoticeId}/user`)\n    .set(\"Authorization\", userJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"_id\");\n(0, chai_1.expect)(response.body.contract.orchestrator).to.equal(testAccount_1.testProvider1.did);\n(0, chai_1.expect)(response.body.contract.status).to.equal(\"pending\");\n(0, chai_1.expect)(response.body.dataProvider._id).to.equal(testAccount_1.testProvider1.identifier);\n(0, chai_1.expect)(response.body.purposes[0].providedBy).to.equal(testAccount_1.testConsumer1.identifier);\n(0, chai_1.expect)(response.body.data[0].providedBy).to.equal(testAccount_1.testProvider1.identifier);",
              "err": {},
              "uuid": "c727327a-72cc-4bcc-8bed-6b8d9bc00873",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsents - by user",
              "fullTitle": "Consent Routes Tests should getUserConsents - by user",
              "timedOut": false,
              "duration": 41,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me`)\n    .set(\"x-user-key\", providerUserIdentifier);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"consents\");\n(0, chai_1.expect)(response.body.consents[0]._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.consents[0].providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consented).to.equal(true);\n(0, chai_1.expect)(response.body.consents[0].dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.consents[0].dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.consents[0].status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.consents[0].privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "ae5659c7-d824-4653-ae3b-06bced1135e4",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsents - by participant",
              "fullTitle": "Consent Routes Tests should getUserConsents - by participant",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/participants/${providerUserIdentifier}/`)\n    .set(\"Authorization\", providerJWT);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"consents\");\n(0, chai_1.expect)(response.body.consents[0]._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.consents[0].providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consents[0].consented).to.equal(true);\n(0, chai_1.expect)(response.body.consents[0].dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.consents[0].dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.consents[0].status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.consents[0].privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "88c782fa-2fe5-473c-a05a-bbe297209595",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsentById - by user",
              "fullTitle": "Consent Routes Tests should getUserConsentById - by user",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me/${consentId}`)\n    .set(\"x-user-key\", providerUserIdentifier);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consented).to.equal(true);\n(0, chai_1.expect)(response.body.dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "a1c795c4-5754-45af-a419-79f75570f366",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should getUserConsentById - by participant",
              "fullTitle": "Consent Routes Tests should getUserConsentById - by participant",
              "timedOut": false,
              "duration": 38,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/participants/${providerUserIdentifier}/${consentId}`)\n    .set(\"Authorization\", providerJWT);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body._id).to.equal(consentId);\n(0, chai_1.expect)(response.body.providerUserIdentifier).to.equal(providerUserIdentifier);\n(0, chai_1.expect)(response.body.consumerUserIdentifier).to.equal(consumerUserIdentifier);\n(0, chai_1.expect)(response.body.consented).to.equal(true);\n(0, chai_1.expect)(response.body.dataProvider).to.equal(providerId);\n(0, chai_1.expect)(response.body.dataConsumer).to.equal(consumerId);\n(0, chai_1.expect)(response.body.status).to.equal(\"granted\");\n(0, chai_1.expect)(response.body.privacyNotice).to.equal(privacyNoticeId);",
              "err": {},
              "uuid": "27c0e0e1-aba3-4066-b54a-ca69a8d6b41e",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should attach token to consent",
              "fullTitle": "Consent Routes Tests should attach token to consent",
              "timedOut": false,
              "duration": 119,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Mocking import consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/import\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/token`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n    providerDataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"successfully forwarded consent to the data consumer\");",
              "err": {},
              "uuid": "87fc27dd-eefd-46ca-ac60-b552e3bc0aae",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should validate the consent",
              "fullTitle": "Consent Routes Tests should validate the consent",
              "timedOut": false,
              "duration": 33,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//mocking export consent\n(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/${consentId}/validate`)\n    .set(\"Authorization\", providerJWT)\n    .send({\n    token,\n});\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"token matches consent token\");\n(0, chai_1.expect)(response.body).to.have.property(\"verified\", true);",
              "err": {},
              "uuid": "d6105047-91ca-47d5-8707-21f74d166433",
              "parentUUID": "729bfc0b-19e4-4cc7-af15-07a4ee01c549",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "a9d99731-d9b4-46d6-ae2f-42cda8bf9544",
              "title": "Test error",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\consents.spec.ts",
              "file": "\\src\\tests\\consents.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should not getUserConsents with no authorization",
                  "fullTitle": "Consent Routes Tests Test error should not getUserConsents with no authorization",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/consents/me`)\n    .expect(401);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Authorization header missing or invalid\");",
                  "err": {},
                  "uuid": "de3191db-c1e9-4641-8639-e080fb940f6b",
                  "parentUUID": "a9d99731-d9b4-46d6-ae2f-42cda8bf9544",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not trigger data exchange for a non-existent consent",
                  "fullTitle": "Consent Routes Tests Test error should not trigger data exchange for a non-existent consent",
                  "timedOut": false,
                  "duration": 19,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "(0, nock_1.default)(\"https://test.consent\").post(\"/consent/export\").reply(200, {\n    message: \"ok\",\n    token,\n    dataExchangeId: \"5f6dd4e3495aebd3aca59529\",\n});\n(0, mock_1.setupnockMocks)(providerBase64);\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/consents/6601a6265cbdad603e4e9a8c/data-exchange`)\n    .set(\"x-user-key\", providerUserIdentifier)\n    .send({ privacyNoticeId: privacyNoticeId });\n(0, chai_1.expect)(response.status).to.be.equal(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"consent not found\");",
                  "err": {},
                  "uuid": "e9752f23-a1f2-4a73-9624-dc39f0751eaa",
                  "parentUUID": "a9d99731-d9b4-46d6-ae2f-42cda8bf9544",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "de3191db-c1e9-4641-8639-e080fb940f6b",
                "e9752f23-a1f2-4a73-9624-dc39f0751eaa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 28,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [
            "c5afd746-d0ea-470d-aff1-9269686917aa",
            "9a8c76ce-311c-410d-8f0c-2e913b11962d",
            "355479d0-fa86-4b03-a9e6-c923b6589b30",
            "fea64e87-77fa-4a3c-94f1-a82258aa0f6c",
            "1b498542-c518-41c0-b1fe-09eb1525e58a",
            "cc631a6a-3d07-450c-aff4-130822d959a3",
            "92508627-2b1e-4ffe-bde0-bf18f388282c",
            "c727327a-72cc-4bcc-8bed-6b8d9bc00873",
            "ae5659c7-d824-4653-ae3b-06bced1135e4",
            "88c782fa-2fe5-473c-a05a-bbe297209595",
            "a1c795c4-5754-45af-a419-79f75570f366",
            "27c0e0e1-aba3-4066-b54a-ca69a8d6b41e",
            "87fc27dd-eefd-46ca-ac60-b552e3bc0aae",
            "d6105047-91ca-47d5-8707-21f74d166433"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1265,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        },
        {
          "uuid": "b044ec11-fd9d-49a5-875f-89c6972b8fce",
          "title": "Participant Routes Tests",
          "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
          "file": "\\src\\tests\\participants.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "3d53718d-b8cf-4843-9888-86073328d57a",
              "title": "registerParticipant",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new participant",
                  "fullTitle": "Participant Routes Tests registerParticipant should register a new participant",
                  "timedOut": false,
                  "duration": 33,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const participantData = testAccount_1.testParticipant2;\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/`)\n    .send(participantData);\nparticipantId = response.body._id;\n(0, chai_1.expect)(response.status).to.be.equal(201);\n(0, chai_1.expect)(response.body).to.not.be.empty;",
                  "err": {},
                  "uuid": "43d8c003-9b6f-4232-9dd8-2fcce2412dcd",
                  "parentUUID": "3d53718d-b8cf-4843-9888-86073328d57a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to register existing participant",
                  "fullTitle": "Participant Routes Tests registerParticipant should fail to register existing participant",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Assuming the participant with client ID 'existingClient' already exists in the database\nconst existingParticipantData = testAccount_1.testExistingPrticipant;\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants`)\n    .send(existingParticipantData)\n    .expect(409);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"Participant already exists\");",
                  "err": {},
                  "uuid": "68e84c87-8cb3-464b-b557-19c627c9fffb",
                  "parentUUID": "3d53718d-b8cf-4843-9888-86073328d57a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "43d8c003-9b6f-4232-9dd8-2fcce2412dcd",
                "68e84c87-8cb3-464b-b557-19c627c9fffb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 53,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "7c811642-a967-4ffd-9c20-aa926f2e13c2",
              "title": "getParticipantById",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get participant by ID",
                  "fullTitle": "Participant Routes Tests getParticipantById should get participant by ID",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app).get(`/v1/participants/${participantId}`);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "d98d05dc-2aaf-4543-bd94-a443d3acef8a",
                  "parentUUID": "7c811642-a967-4ffd-9c20-aa926f2e13c2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to get non-existing participant",
                  "fullTitle": "Participant Routes Tests getParticipantById should fail to get non-existing participant",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app).get(`/v1/participants/65eed1cd59f9242b784f2494`);\n(0, chai_1.expect)(response.status).to.be.equal(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"participant not found\");",
                  "err": {},
                  "uuid": "3978b160-c893-4f96-a05b-96faeb86271c",
                  "parentUUID": "7c811642-a967-4ffd-9c20-aa926f2e13c2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d98d05dc-2aaf-4543-bd94-a443d3acef8a",
                "3978b160-c893-4f96-a05b-96faeb86271c"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "fdf42884-2b75-4986-9d85-a2988f3cf0fb",
              "title": "getParticipantByClientId",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get participant by client ID",
                  "fullTitle": "Participant Routes Tests getParticipantByClientId should get participant by client ID",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// Assuming there's a participant with client ID 'client123' in the database\nconst response = await (0, supertest_1.default)(serverInstance.app).get(`/v1/participants/clientId/bI8fbrUoT4th4zMXRqCV6YVxpPknLDHttLVLG6Pgtm4JQlMInSJscxZnEDZxQBQBv2BP2M6QFYbDAQrD3ibnsWpYySIFr4w27DKQ`);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "beb1426d-73c2-4c82-8550-14b38b87e9d7",
                  "parentUUID": "fdf42884-2b75-4986-9d85-a2988f3cf0fb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to get participant with non-existing client ID",
                  "fullTitle": "Participant Routes Tests getParticipantByClientId should fail to get participant with non-existing client ID",
                  "timedOut": false,
                  "duration": 12,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app).get(`/v1/participants/clientId/nonExistingClientId`);\n(0, chai_1.expect)(response.status).to.be.equal(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"participant not found\");",
                  "err": {},
                  "uuid": "319e284d-632f-41c4-a2bc-c7c522174be2",
                  "parentUUID": "fdf42884-2b75-4986-9d85-a2988f3cf0fb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "beb1426d-73c2-4c82-8550-14b38b87e9d7",
                "319e284d-632f-41c4-a2bc-c7c522174be2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "c2082e52-8f9c-4dc3-8441-e88990560c44",
              "title": "loginParticipant",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login participant with valid credentials",
                  "fullTitle": "Participant Routes Tests loginParticipant should login participant with valid credentials",
                  "timedOut": false,
                  "duration": 13,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const providerAuthResponse = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: testAccount_1.testParticipant2.clientID,\n    clientSecret: testAccount_1.testParticipant2.clientSecret,\n});\n(0, chai_1.expect)(providerAuthResponse.status).to.be.equal(200);\nparticipantJwt = `Bearer ${providerAuthResponse.body.jwt}`;\n(0, chai_1.expect)(providerAuthResponse.body).to.have.property(\"success\", true);\n(0, chai_1.expect)(providerAuthResponse.body).to.have.property(\"jwt\");\n(0, chai_1.expect)(providerAuthResponse.body).to.have.property(\"message\");",
                  "err": {},
                  "uuid": "2874c51a-b5be-4b52-9bdc-7536e5664f5c",
                  "parentUUID": "c2082e52-8f9c-4dc3-8441-e88990560c44",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to login participant with invalid credentials",
                  "fullTitle": "Participant Routes Tests loginParticipant should fail to login participant with invalid credentials",
                  "timedOut": false,
                  "duration": 10,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/participants/login`)\n    .send({\n    clientID: \"nonExistingClient\",\n    clientSecret: \"invalidSecret\",\n})\n    .expect(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"participant not found\");",
                  "err": {},
                  "uuid": "4cd1499a-b37d-479f-aa33-b736e267b92d",
                  "parentUUID": "c2082e52-8f9c-4dc3-8441-e88990560c44",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2874c51a-b5be-4b52-9bdc-7536e5664f5c",
                "4cd1499a-b37d-479f-aa33-b736e267b92d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "b670e32d-6180-4a87-bc43-e3b17223710b",
              "title": "updateParticipantByClientId",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should update participant by client ID",
                  "fullTitle": "Participant Routes Tests updateParticipantByClientId should update participant by client ID",
                  "timedOut": false,
                  "duration": 37,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const updatedParticipantData = testAccount_1.testupdatedPrticipant;\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .put(`/v1/participants/clientId/bI8fbrUoT4th4zMXRqCV6YVxpPknLDHttLVLG6Pgtm4JQlMInSJscxZnEDZxQBQBv2BP2M6QFYbDAQrD3ibnsWpYySIFr4w27DKQ`)\n    .send(updatedParticipantData)\n    .set(\"Authorization\", participantJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "3b02114e-1652-4868-82fc-7afe78f82a44",
                  "parentUUID": "b670e32d-6180-4a87-bc43-e3b17223710b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to update participant with non-existing client ID",
                  "fullTitle": "Participant Routes Tests updateParticipantByClientId should fail to update participant with non-existing client ID",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app).get(`/v1/participants/clientId/nonExistingClientId`);\n(0, chai_1.expect)(response.status).to.be.equal(404);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"participant not found\");",
                  "err": {},
                  "uuid": "12e20912-ab99-447e-bef3-2dbc6fb13ca2",
                  "parentUUID": "b670e32d-6180-4a87-bc43-e3b17223710b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3b02114e-1652-4868-82fc-7afe78f82a44",
                "12e20912-ab99-447e-bef3-2dbc6fb13ca2"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 46,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "5d661f1c-87e4-47ab-8d2d-ce852a1a9615",
              "title": "getAllParticipants",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get all participants",
                  "fullTitle": "Participant Routes Tests getAllParticipants should get all participants",
                  "timedOut": false,
                  "duration": 20,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app).get(`/v1/participants/`);\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "ff4e567e-e8dd-4644-8fcb-86dd4e3afa92",
                  "parentUUID": "5d661f1c-87e4-47ab-8d2d-ce852a1a9615",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "ff4e567e-e8dd-4644-8fcb-86dd4e3afa92"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "05293c8d-2424-470b-84cf-3f2135820745",
              "title": "getMyParticipant",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should getMyParticipant",
                  "fullTitle": "Participant Routes Tests getMyParticipant should getMyParticipant",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/participants/me`)\n    .set(\"Authorization\", participantJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "750cecd7-8a88-487d-99b4-34f9ea243c7a",
                  "parentUUID": "05293c8d-2424-470b-84cf-3f2135820745",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "750cecd7-8a88-487d-99b4-34f9ea243c7a"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 38,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "50550199-664e-484f-9dec-cdaf61d66383",
              "title": "deleteParticipant",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\participants.spec.ts",
              "file": "\\src\\tests\\participants.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should delete participant",
                  "fullTitle": "Participant Routes Tests deleteParticipant should delete participant",
                  "timedOut": false,
                  "duration": 43,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .delete(`/v1/participants/me`)\n    .set(\"Authorization\", participantJwt)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"Participant deleted successfully\");",
                  "err": {},
                  "uuid": "d4336195-d045-47ec-b421-09085dce7f0f",
                  "parentUUID": "50550199-664e-484f-9dec-cdaf61d66383",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d4336195-d045-47ec-b421-09085dce7f0f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 43,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        },
        {
          "uuid": "056672ed-f1e2-48e6-b056-66c10b00aa9e",
          "title": "Users Routes Tests",
          "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\users.spec.ts",
          "file": "\\src\\tests\\users.spec.ts",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "913eb0b9-57b1-455c-9519-7f25251d70e4",
              "title": "signup",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\users.spec.ts",
              "file": "\\src\\tests\\users.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should create a new user",
                  "fullTitle": "Users Routes Tests signup should create a new user",
                  "timedOut": false,
                  "duration": 134,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const userData = testAccount_1.testUser2;\nconst response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/signup`)\n    .send(userData);\nuserId = response.body.user._id;\n(0, chai_1.expect)(response.status).to.be.equal(200);\n(0, chai_1.expect)(response.body).to.have.property(\"user\");\n(0, chai_1.expect)(response.body.user).to.have.property(\"firstName\", \"John\");\n(0, chai_1.expect)(response.body.user).to.have.property(\"lastName\", \"Doe\");\n(0, chai_1.expect)(response.body.user).to.have.property(\"email\", \"john@example.com\");\n(0, chai_1.expect)(response.body).to.have.property(\"accessToken\");\n(0, chai_1.expect)(response.body).to.have.property(\"refreshToken\");",
                  "err": {},
                  "uuid": "76ae8569-2d81-406e-a3b3-eef7c83bacd4",
                  "parentUUID": "913eb0b9-57b1-455c-9519-7f25251d70e4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "76ae8569-2d81-406e-a3b3-eef7c83bacd4"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 134,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "37703be7-820d-4e15-8752-16b7dfac1fb2",
              "title": "login user",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\users.spec.ts",
              "file": "\\src\\tests\\users.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should login an existing user",
                  "fullTitle": "Users Routes Tests login user should login an existing user",
                  "timedOut": false,
                  "duration": 159,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: testAccount_1.testUser2.email,\n    password: testAccount_1.testUser2.password,\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.have.property(\"user\");\n(0, chai_1.expect)(response.body.user).to.have.property(\"firstName\", \"John\");\n(0, chai_1.expect)(response.body.user).to.have.property(\"lastName\", \"Doe\");\n(0, chai_1.expect)(response.body.user).to.have.property(\"email\", \"john@example.com\");\n(0, chai_1.expect)(response.body).to.have.property(\"accessToken\");\n(0, chai_1.expect)(response.body).to.have.property(\"refreshToken\");",
                  "err": {},
                  "uuid": "25d2ea62-46f1-4db8-85db-3a9f0cd71cbe",
                  "parentUUID": "37703be7-820d-4e15-8752-16b7dfac1fb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to login with invalid credentials",
                  "fullTitle": "Users Routes Tests login user should fail to login with invalid credentials",
                  "timedOut": false,
                  "duration": 96,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: \"john@example.com\",\n    password: \"wrongpassword\",\n})\n    .expect(400);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"invalid credentials\");",
                  "err": {},
                  "uuid": "3d25b2cb-113f-48ee-b258-6832c83ac423",
                  "parentUUID": "37703be7-820d-4e15-8752-16b7dfac1fb2",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to login with non-existing user",
                  "fullTitle": "Users Routes Tests login user should fail to login with non-existing user",
                  "timedOut": false,
                  "duration": 8,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/login`)\n    .send({\n    email: \"nonexisting@example.com\",\n    password: \"password\",\n})\n    .expect(404);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"User not found\");",
                  "err": {},
                  "uuid": "2b9f6639-f3d8-4cc3-8851-818507f8a4ca",
                  "parentUUID": "37703be7-820d-4e15-8752-16b7dfac1fb2",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "25d2ea62-46f1-4db8-85db-3a9f0cd71cbe",
                "3d25b2cb-113f-48ee-b258-6832c83ac423",
                "2b9f6639-f3d8-4cc3-8851-818507f8a4ca"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 263,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "de5244c7-710c-4b86-be40-f46ae986cebb",
              "title": "getUserById",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\users.spec.ts",
              "file": "\\src\\tests\\users.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should get user by ID",
                  "fullTitle": "Users Routes Tests getUserById should get user by ID",
                  "timedOut": false,
                  "duration": 9,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/users/${userId}`)\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "f0626aad-eb87-4a01-8b4e-2c7b975117fb",
                  "parentUUID": "de5244c7-710c-4b86-be40-f46ae986cebb",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to get non-existing user",
                  "fullTitle": "Users Routes Tests getUserById should fail to get non-existing user",
                  "timedOut": false,
                  "duration": 11,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .get(`/v1/users/65eed1cd59f9242b784f2494`)\n    .expect(404);\n(0, chai_1.expect)(response.body).to.have.property(\"message\", \"User not found\");",
                  "err": {},
                  "uuid": "962216a8-922e-4978-95bd-0f40303278e6",
                  "parentUUID": "de5244c7-710c-4b86-be40-f46ae986cebb",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "f0626aad-eb87-4a01-8b4e-2c7b975117fb",
                "962216a8-922e-4978-95bd-0f40303278e6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 20,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "230bb7bc-1db2-4d65-b68c-4e171c8bc9dd",
              "title": "registerUserIdentifier",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\users.spec.ts",
              "file": "\\src\\tests\\users.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register a new user identifier",
                  "fullTitle": "Users Routes Tests registerUserIdentifier should register a new user identifier",
                  "timedOut": false,
                  "duration": 53,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", participantJWT)\n    .send({\n    email: \"newuser@example.com\",\n    identifier: \"newidentifier\",\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;",
                  "err": {},
                  "uuid": "c14ca36e-35f1-4661-9703-bbfda6da78ab",
                  "parentUUID": "230bb7bc-1db2-4d65-b68c-4e171c8bc9dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to register existing user identifier",
                  "fullTitle": "Users Routes Tests registerUserIdentifier should fail to register existing user identifier",
                  "timedOut": false,
                  "duration": 38,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", participantJWT)\n    .send({\n    email: \"newuser@example.com\",\n    identifier: \"newidentifier\",\n})\n    .expect(409);\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"User already exists\");",
                  "err": {},
                  "uuid": "42d3837b-b204-4577-8380-6efd297e90a5",
                  "parentUUID": "230bb7bc-1db2-4d65-b68c-4e171c8bc9dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to register user identifier with missing fields",
                  "fullTitle": "Users Routes Tests registerUserIdentifier should fail to register user identifier with missing fields",
                  "timedOut": false,
                  "duration": 62,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", participantJWT)\n    .send({})\n    .expect(400);\n(0, chai_1.expect)(response).to.throws;\n(0, chai_1.expect)(response.body).to.have.property(\"errors\");",
                  "err": {},
                  "uuid": "121fa6e5-4f1c-46a0-a4be-14b315897404",
                  "parentUUID": "230bb7bc-1db2-4d65-b68c-4e171c8bc9dd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to register user without email and identifier",
                  "fullTitle": "Users Routes Tests registerUserIdentifier should fail to register user without email and identifier",
                  "timedOut": false,
                  "duration": 47,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", participantJWT)\n    .send({\n    users: [{}],\n})\n    .expect(400);\n(0, chai_1.expect)(response.body).to.have.property(\"errors\");\n(0, chai_1.expect)(response.body.errors[0]).to.deep.include({\n    field: \"email\",\n    message: \"Email must exist if identifier does not\",\n});\n(0, chai_1.expect)(response.body.errors[1]).to.deep.include({\n    field: \"identifier\",\n    message: \"identifier must exist if email does not\",\n});",
                  "err": {},
                  "uuid": "b5093695-c9f9-405f-ac19-4a75b7b20f50",
                  "parentUUID": "230bb7bc-1db2-4d65-b68c-4e171c8bc9dd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c14ca36e-35f1-4661-9703-bbfda6da78ab",
                "42d3837b-b204-4577-8380-6efd297e90a5",
                "121fa6e5-4f1c-46a0-a4be-14b315897404",
                "b5093695-c9f9-405f-ac19-4a75b7b20f50"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 200,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            },
            {
              "uuid": "b4b04257-bf3e-4de3-9c71-a9ff1d81d371",
              "title": "registerUserIdentifiers",
              "fullFile": "C:\\Users\\ASF\\Desktop\\Visions\\Visions\\PTx\\consent-manager\\src\\tests\\users.spec.ts",
              "file": "\\src\\tests\\users.spec.ts",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "should register new user identifiers from CSV",
                  "fullTitle": "Users Routes Tests registerUserIdentifiers should register new user identifiers from CSV",
                  "timedOut": false,
                  "duration": 86,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/registers`)\n    .set(\"Authorization\", participantJWT)\n    .send({\n    users: [\n        { email: \"user1@example.com\", internalID: \"id1\" },\n        { email: \"user2@example.com\", internalID: \"id2\" },\n    ],\n})\n    .expect(200);\n(0, chai_1.expect)(response.body).to.not.be.empty;\n// Assert other properties if needed",
                  "err": {},
                  "uuid": "e613d5eb-30d1-4bd6-a5ad-3def2aa2e1f7",
                  "parentUUID": "b4b04257-bf3e-4de3-9c71-a9ff1d81d371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should not register existing user identifiers",
                  "fullTitle": "Users Routes Tests registerUserIdentifiers should not register existing user identifiers",
                  "timedOut": false,
                  "duration": 32,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/registers`)\n    .set(\"Authorization\", participantJWT)\n    .send({\n    users: [\n        { email: \"user1@example.com\", internalID: \"id1\" },\n        { email: \"user2@example.com\", internalID: \"id2\" },\n    ],\n});\n(0, chai_1.expect)(400);\n//error message inapropriate",
                  "err": {},
                  "uuid": "9a907130-af39-4d86-8e6c-52ab6900d952",
                  "parentUUID": "b4b04257-bf3e-4de3-9c71-a9ff1d81d371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to register user identifiers with missing fields",
                  "fullTitle": "Users Routes Tests registerUserIdentifiers should fail to register user identifiers with missing fields",
                  "timedOut": false,
                  "duration": 41,
                  "state": "passed",
                  "speed": "medium",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/register`)\n    .set(\"Authorization\", participantJWT)\n    .send({})\n    .expect(400);\n(0, chai_1.expect)(response).to.throws;\n(0, chai_1.expect)(response.body).to.have.property(\"error\", \"Missing or invalid fields\");\n(0, chai_1.expect)(response.body).to.have.property(\"errors\").that.is.an(\"array\");\n(0, chai_1.expect)(response.body.errors).to.deep.include({\n    field: \"email\",\n    message: \"Email must exist if identifier does not\",\n});\n(0, chai_1.expect)(response.body.errors).to.deep.include({\n    field: \"identifier\",\n    message: \"identifier must exist if email does not\",\n});",
                  "err": {},
                  "uuid": "613af32d-1111-4dac-b62a-78b4f8dc7dbf",
                  "parentUUID": "b4b04257-bf3e-4de3-9c71-a9ff1d81d371",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "should fail to register user without email and identifier",
                  "fullTitle": "Users Routes Tests registerUserIdentifiers should fail to register user without email and identifier",
                  "timedOut": false,
                  "duration": 34,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const response = await (0, supertest_1.default)(serverInstance.app)\n    .post(`/v1/users/registers`)\n    .set(\"Authorization\", participantJWT)\n    .send({\n    users: [{}],\n})\n    .expect(400);\n(0, chai_1.expect)(response.body).to.have.property(\"errors\");\n(0, chai_1.expect)(response.body.errors[0]).to.deep.include({\n    field: \"email\",\n    message: \"Email must exist if identifier does not\",\n});\n(0, chai_1.expect)(response.body.errors[1]).to.deep.include({\n    field: \"identifier\",\n    message: \"identifier must exist if email does not\",\n});",
                  "err": {},
                  "uuid": "68718945-19ad-4e6f-b5e6-9540f647a4d8",
                  "parentUUID": "b4b04257-bf3e-4de3-9c71-a9ff1d81d371",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e613d5eb-30d1-4bd6-a5ad-3def2aa2e1f7",
                "9a907130-af39-4d86-8e6c-52ab6900d952",
                "613af32d-1111-4dac-b62a-78b4f8dc7dbf",
                "68718945-19ad-4e6f-b5e6-9540f647a4d8"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 193,
              "root": false,
              "rootEmpty": false,
              "_timeout": 4000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 4000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 4000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}